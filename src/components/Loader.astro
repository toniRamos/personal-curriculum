---
// Enhanced Loader component with anime.js animations
---

<div class="loader-wrapper" id="loader">
	<div class="loader">
		<div class="loader-logo">
			<div class="logo-container">
				<div class="logo-square animate-entrance" id="logo-square">
					<span class="logo-text animate-entrance" id="logo-text">AR</span>
				</div>
				<div class="loading-dots">
					<div class="dot animate-entrance" id="dot1"></div>
					<div class="dot animate-entrance" id="dot2"></div>
					<div class="dot animate-entrance" id="dot3"></div>
				</div>
			</div>
		</div>
	</div>
</div>

<style>
	.loader-wrapper {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: linear-gradient(135deg, #0a192f 0%, #112240 100%);
		z-index: 9999;
		display: flex;
		justify-content: center;
		align-items: center;
		transition: all 0.6s cubic-bezier(0.645, 0.045, 0.355, 1);
	}

	.loader-wrapper.fade-out {
		opacity: 0;
		visibility: hidden;
	}

	.loader {
		text-align: center;
		color: #64ffda;
	}

	.logo-container {
		position: relative;
		margin-bottom: 30px;
	}

	.logo-square {
		width: 100px;
		height: 100px;
		border: 3px solid #64ffda;
		border-radius: 8px;
		display: flex;
		justify-content: center;
		align-items: center;
		margin: 0 auto 20px;
		position: relative;
		background: rgba(100, 255, 218, 0.05);
		box-shadow: 
			0 0 20px rgba(100, 255, 218, 0.3),
			inset 0 0 20px rgba(100, 255, 218, 0.1);
		opacity: 1;
		transform: scale(1) rotate(0deg);
		filter: blur(15px);
		animation: focusIn 1.25s ease-out forwards;
	}

	.logo-square.animate-entrance {
		opacity: 0;
		transform: scale(0.5) rotate(45deg);
	}

	.logo-text {
		color: #64ffda;
		font-size: 36px;
		font-weight: 600;
		font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
		user-select: none;
		opacity: 1;
		transform: scale(1);
		filter: blur(8px);
		animation: textFocusIn 1.25s ease-out 0.15s forwards;
	}

	.logo-text.animate-entrance {
		opacity: 0;
		transform: scale(0);
	}

	.loading-dots {
		display: flex;
		justify-content: center;
		gap: 8px;
		margin-top: 15px;
	}

	.dot {
		width: 8px;
		height: 8px;
		background-color: #64ffda;
		border-radius: 50%;
		opacity: 0.6;
		transform: scale(1);
		animation: dotFocusIn 1s ease-out forwards;
	}

	.dot:nth-child(1) {
		animation-delay: 0.4s;
	}

	.dot:nth-child(2) {
		animation-delay: 0.5s;
	}

	.dot:nth-child(3) {
		animation-delay: 0.6s;
	}

	.dot.animate-entrance {
		opacity: 0.3;
		transform: scale(0);
	}



	/* Animaciones CSS - Enfoque progresivo */
	@keyframes focusIn {
		0% {
			filter: blur(15px);
			transform: scale(0.95);
			opacity: 0.7;
			box-shadow: 
				0 0 50px rgba(100, 255, 218, 0.8),
				inset 0 0 50px rgba(100, 255, 218, 0.4);
		}
		30% {
			filter: blur(8px);
			transform: scale(0.98);
			opacity: 0.85;
			box-shadow: 
				0 0 35px rgba(100, 255, 218, 0.6),
				inset 0 0 35px rgba(100, 255, 218, 0.3);
		}
		60% {
			filter: blur(3px);
			transform: scale(0.99);
			opacity: 0.95;
			box-shadow: 
				0 0 25px rgba(100, 255, 218, 0.4),
				inset 0 0 25px rgba(100, 255, 218, 0.2);
		}
		85% {
			filter: blur(1px);
			transform: scale(1);
			opacity: 0.98;
			box-shadow: 
				0 0 20px rgba(100, 255, 218, 0.3),
				inset 0 0 20px rgba(100, 255, 218, 0.15);
		}
		100% {
			filter: blur(0px);
			transform: scale(1);
			opacity: 1;
			box-shadow: 
				0 0 15px rgba(100, 255, 218, 0.2),
				inset 0 0 15px rgba(100, 255, 218, 0.1);
		}
	}

	@keyframes textFocusIn {
		0% {
			filter: blur(8px);
			opacity: 0.6;
			text-shadow: 
				0 0 30px rgba(100, 255, 218, 0.9),
				0 0 50px rgba(100, 255, 218, 0.6);
		}
		40% {
			filter: blur(4px);
			opacity: 0.8;
			text-shadow: 
				0 0 20px rgba(100, 255, 218, 0.7),
				0 0 30px rgba(100, 255, 218, 0.4);
		}
		70% {
			filter: blur(1px);
			opacity: 0.9;
			text-shadow: 
				0 0 15px rgba(100, 255, 218, 0.5),
				0 0 20px rgba(100, 255, 218, 0.3);
		}
		100% {
			filter: blur(0px);
			opacity: 1;
			text-shadow: 
				0 0 10px rgba(100, 255, 218, 0.4),
				0 0 15px rgba(100, 255, 218, 0.2);
		}
	}

	@keyframes dotFocusIn {
		0% {
			opacity: 0.3;
			transform: scale(0.8);
			filter: blur(4px);
		}
		50% {
			opacity: 0.7;
			transform: scale(1.1);
			filter: blur(2px);
		}
		100% {
			opacity: 1;
			transform: scale(1);
			filter: blur(0px);
		}
	}

	/* Indicador de progreso de carga */
	@keyframes loadingProgress {
		0% {
			opacity: 0.4;
			filter: blur(3px);
		}
		50% {
			opacity: 0.7;
			filter: blur(1px);
		}
		100% {
			opacity: 1;
			filter: blur(0px);
		}
	}
</style>

<script>
	// Enhanced loader with blur animations
	let animationsStarted = false;
	
	function startAnimations() {
		if (animationsStarted) return;
		animationsStarted = true;
		
		console.log('Starting loader animations...');
		
		// Remove animate-entrance classes to show elements
		document.querySelectorAll('.animate-entrance').forEach(el => {
			el.classList.remove('animate-entrance');
		});
		
		// Clean loading with just visual feedback from dots
		
		// Check if anime.js is loaded for enhanced animations
		if (typeof anime !== 'undefined') {
			console.log('Anime.js loaded, adding enhanced blur effects');
			addEnhancedAnimations();
		} else {
			console.log('Using CSS animations only');
		}
		
		// Auto-hide loader when focus animation completes
		setTimeout(() => {
			hideLoader();
		}, 1400);
	}

	function addEnhancedAnimations() {
		// Subtle enhancement - add slight movement to make it feel more alive
		setTimeout(() => {
			// Gentle floating effect after focus is complete
			anime({
				targets: '#logo-square',
				translateY: [-2, 2, -2],
				duration: 1500,
				easing: 'easeInOutSine',
				loop: true,
				delay: 1250 // Start after focus animation
			});
		}, 100);
	}

	function hideLoader() {
		console.log('Hiding loader...');
		
		if (typeof anime !== 'undefined') {
			// Animate out with anime.js
			anime.remove('*'); // Stop all animations
			
			anime({
				targets: '#loader',
				opacity: [1, 0],
				scale: [1, 0.9],
				filter: ['blur(0px)', 'blur(10px)'],
				duration: 400,
				easing: 'easeInExpo',
				complete: () => {
					const loader = document.getElementById('loader');
					if (loader) {
						loader.style.display = 'none';
					}
				}
			});
		} else {
			// Fallback CSS animation
			const loader = document.getElementById('loader');
			if (loader) {
				loader.classList.add('fade-out');
				setTimeout(() => {
					loader.style.display = 'none';
				}, 600);
			}
		}
	}

	// Start animations when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', startAnimations);
	} else {
		startAnimations();
	}
</script>
