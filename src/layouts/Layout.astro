---
import { siteConfig } from '../config/site';
import { getLangFromUrl } from '../i18n/ui';

export interface Props {
	title?: string;
	description?: string;
}

const { title = siteConfig.title, description = siteConfig.description } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const canonicalURL = lang === 'en' 
	? `${siteConfig.url}/en/` 
	: `${siteConfig.url}/`;
const ogImage = `${siteConfig.url}/og-default.png`;
---

<!doctype html>
<html lang={lang}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/portfolio/favicon.svg" />
		
		<!-- SEO -->
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Canonical + hreflang -->
		<link rel="canonical" href={canonicalURL} />
		<link rel="alternate" hreflang="es" href={`${siteConfig.url}/`} />
		<link rel="alternate" hreflang="en" href={`${siteConfig.url}/en/`} />
		<link rel="alternate" hreflang="x-default" href={`${siteConfig.url}/`} />
		
		<!-- Open Graph -->
		<meta property="og:type" content="website" />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={ogImage} />
		<meta property="og:url" content={canonicalURL} />
		<meta property="og:site_name" content={siteConfig.name} />
		
		<!-- Twitter Card -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={ogImage} />
		
		<!-- Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
		
		<!-- Scripts -->
		<script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>
		
		<!-- Schema.org JSON-LD -->
		<script type="application/ld+json" set:html={JSON.stringify({
			"@context": "https://schema.org",
			"@type": "Person",
			"name": siteConfig.name,
			"jobTitle": "Software Architect",
			"url": siteConfig.url,
			"sameAs": [
				siteConfig.social.github,
				siteConfig.social.linkedin
			]
		})} />
	</head>
	<body>
		<div class="cursor-trace"></div>
		<div class="app">
			<slot />
		</div>
	</body>
</html>

<style is:global>
	* {
		box-sizing: border-box;
		margin: 0;
		padding: 0;
	}

	*:before,
	*:after {
		box-sizing: border-box;
	}

	.app {
		width: 100%;
		overflow-x: hidden;
	}

	html {
		font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
		background-color: #0f172a;
		color: #cbd5e1;
		font-size: 16px;
		line-height: 1.6;
		scroll-behavior: smooth;
		overflow-x: hidden;
	}

	body {
		background-color: #0f172a;
		color: #cbd5e1;
		overflow-x: hidden;
		width: 100%;
		max-width: 100vw;
	}

	.cursor-trace {
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		pointer-events: none;
		z-index: 9998;
		overflow: hidden;
	}

	.code-symbol {
		position: absolute;
		font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
		font-size: 14px;
		color: #64ffda;
		pointer-events: none;
		opacity: 1;
		transform: translate(-50%, -50%);
		animation: fadeOut 1s ease-out forwards;
		text-shadow: 0 0 10px rgba(100, 255, 218, 0.5);
	}

	@keyframes fadeOut {
		0% {
			opacity: 1;
			transform: translate(-50%, -50%) scale(1);
		}
		50% {
			opacity: 0.6;
			transform: translate(-50%, -50%) scale(1.2);
		}
		100% {
			opacity: 0;
			transform: translate(-50%, -50%) scale(0.8);
		}
	}

	.cursor-gradient.active {
		opacity: 1;
	}

	.app {
		min-height: 100vh;
		position: relative;
	}

	/* Custom scrollbar */
	::-webkit-scrollbar {
		width: 8px;
	}

	::-webkit-scrollbar-track {
		background: #1e293b;
	}

	::-webkit-scrollbar-thumb {
		background: #475569;
		border-radius: 4px;
	}

	::-webkit-scrollbar-thumb:hover {
		background: #64748b;
	}

	/* Selection colors */
	::selection {
		background-color: #64ffda;
		color: #0f172a;
	}

	/* Links */
	a {
		color: #64ffda;
		text-decoration: none;
		transition: all 0.25s cubic-bezier(0.645, 0.045, 0.355, 1);
	}

	a:hover {
		color: #64ffda;
		text-decoration: underline;
		text-underline-offset: 4px;
	}

	/* Typography */
	h1, h2, h3, h4, h5, h6 {
		color: #e2e8f0;
		font-weight: 600;
		line-height: 1.1;
	}

	h1 {
		font-size: clamp(40px, 8vw, 80px);
		font-weight: 600;
	}

	h2 {
		font-size: clamp(24px, 5vw, 32px);
	}

	h3 {
		font-size: clamp(20px, 4vw, 24px);
	}

	p {
		margin: 0 0 15px 0;
		color: #8892b0;
	}

	code {
		font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
		background-color: #112240;
		color: #64ffda;
		padding: 3px 5px;
		border-radius: 3px;
		font-size: 0.85em;
	}

	/* Responsive utilities */
	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 20px;
	}

	@media (max-width: 768px) {
		.container {
			padding: 0 15px;
		}
		
		/* Hide cursor effect on mobile */
		.cursor-trace {
			display: none;
		}
	}
</style>

<script>
	// Code Trace Cursor Effect
	document.addEventListener('DOMContentLoaded', function() {
		const cursorTrace = document.querySelector('.cursor-trace');
		if (!cursorTrace) return;

		// Array of code symbols to display
		const codeSymbols = [
			'</>',
			'{}',
			'[]',
			'()',
			'=>',
			'::',
			'===',
			'!=',
			'++',
			'--',
			'&&',
			'||',
			'?:',
			';',
			'.',
			'$',
			'#',
			'@',
			'*',
			'+',
			'.log()',
			'.env',
			'printf',
			'await',
			'async',
		];

		let lastTime = 0;
		const throttleDelay = 50; // Create symbol every 50ms max

		// Function to create a code symbol at cursor position
		function createCodeSymbol(x, y) {
			const symbol = document.createElement('div');
			symbol.className = 'code-symbol';
			symbol.textContent = codeSymbols[Math.floor(Math.random() * codeSymbols.length)];
			symbol.style.left = x + 'px';
			symbol.style.top = y + 'px';
			
			// Add slight random offset for more natural feel
			const offsetX = (Math.random() - 0.5) * 20;
			const offsetY = (Math.random() - 0.5) * 20;
			symbol.style.transform = `translate(calc(-50% + ${offsetX}px), calc(-50% + ${offsetY}px))`;

			cursorTrace.appendChild(symbol);

			// Remove symbol after animation completes
			setTimeout(() => {
				if (symbol.parentNode) {
					symbol.parentNode.removeChild(symbol);
				}
			}, 1000);
		}

		// Track mouse movement and create symbols
		document.addEventListener('mousemove', function(e) {
			const currentTime = Date.now();
			
			// Throttle symbol creation
			if (currentTime - lastTime > throttleDelay) {
				createCodeSymbol(e.clientX, e.clientY);
				lastTime = currentTime;
			}
		});

		// Create symbol on click for extra interactivity
		document.addEventListener('click', function(e) {
			// Create multiple symbols on click
			for (let i = 0; i < 3; i++) {
				setTimeout(() => {
					createCodeSymbol(e.clientX, e.clientY);
				}, i * 100);
			}
		});
	});
</script>
